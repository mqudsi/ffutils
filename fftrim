#!/usr/bin/env fish
# vim: set ft=fish:

# example: fftrim in.mp4 0:00,0:10 0:20,1:20 out.mp4

set -l crop ""
if test $argv[1] = "--crop"
    set -e argv[1]
    set crop (ffmpeg -i $argv[1]  -vf cropdetect -f null - 2>|
                string match -r 'crop=.*' | sort | uniq -c | sort -nb | tail -n 1 | string match -r 'crop=.*')
    echo "Crop detected: " $crop
    set crop (echo $crop,)
end

set -l half 0
if test $argv[1] = "--half" -o $argv[1] = "--halve"
    set half 1
    set -e argv[1]
end

set -l audio_style "-c:a copy"
if string match -r -- "--(re)?encode.?audio" $argv[1]
    set audio_style "-c:a libfdk_aac -ac 1 -b:a 48k"
    set -e argv[1]
end

set -l lossless 1
if string match -- "--reprocess" $argv[1] || string match -- "--reencode" $argv[1]
    set lossless 0
    set argv $argv[2..-1]
end

set -l build

set -l source (realpath $argv[1])
set -l chunks $argv[2..-2] # skip first and last parameters
set -l dest (realpath $argv[-1])
# We need to cache this value in case we overwrite the input
set -l orig_size (stat $source --format '%s')

if test $half -eq 1
    # Duration: 00:02:32.02
    string match -rq -- "Duration: (?<hours>\d\d):(?<minutes>\d\d):(?<seconds>\d\d\.\d\d)" (ffprobe -i $source 2>&1)
    set seconds (math $hours \* 3600 + $minutes \* 60 + $seconds)
    set chunks "0,"(math $seconds/2)
end

# Create a directory to hold build scripts and intermediate files
set outdir (mktemp -d)
# set outdir /tmp/tmp.aJ6ntpV6qY/
set script $outdir/build.ninja
rm -f $script

set ext (string replace -r '.*\.' '' -- $dest)

set extra_cmd
if test $ext = "m4v"
	# work around http://trac.ffmpeg.org/ticket/7685
	set extra_cmd $extra_cmd -f mp4
end

# ninja can't handle the destination being a source
set -l temp_dest (mktemp $outdir/XXXX.$ext)
rm -f $temp_dest

set -l crf 14

# wmv audio is lost if not re-encoded
if string match -iq -- wmv $ext
    set audio_style "-c:a libfdk_aac -ac 1 -b:a 48k"
end

# Subtract two timestamps
function ts_diff
    set i 1
    set seconds
    for ts in $argv
        # Split on : and treat as base 60 numbers to convert to seconds
        set parts (string split ':' -- $ts)
        set base 1
        set result 0
        for part in $parts[-1..1]
            set result (math "$result + $base * $part")
            set base (math "$base * 60")
        end

        set seconds[$i] $result
        set i (math $i + 1)
    end

    # The duration in seconds (fractional OK)
    set duration (math $seconds[-1] - $seconds[-2])

    # Convert it to a timestamp?
    set hh 0
    set ss $duration
    if test $duration -ge 60
        set hh (math -s0 $duration / 60)
        set ss (math $duration % 60)
    end

    echo $hh:$ss
end

begin
    echo 'rule fftrim'

    # -map_metadata:s:a 0:s:a
    # printf '    command = ffmpeg -i $in -ss $start $cmd_end -c:v libx265 -filter:v hqdn3d=4:4:3:3 -b:v 1M -qmin 14 -qmax 25 -maxrate 1.4M -bufsize 1M -c:a libfdk_aac -ac 1 -b:a 48k $out\n' $crf
    if test $lossless -eq 1
        # Per https://trac.ffmpeg.org/wiki/Seeking
        # * Using -ss before -i (sometimes) aligns to keyframes, but we need to use -t <length> instead of -to <timestamp>
        # * Use `-noaccurate_seek` to skip backwards to the preceding keyframe to avoid periods of no video (default when not transcoding)
        # * Use `-avoid_negative_ts 1` to prevent issues with out-of-order PTS values for subsequent frames
        printf '    command = env AV_LOG_FORCE_COLOR=1 ffmpeg -fflags +genpts -hide_banner -ss $start -i $in -write_id3v2 1 -id3v2_version 3 -map_metadata 0 -map_metadata:s:v 0:s:v -movflags use_metadata_tags -movflags faststart $cmd_end -c:v copy -avoid_negative_ts 1 %s -export_xmp 1 -export_all 1 $out\n' $audio_style "$extra_cmd"
    else
        # use yuvj420p if not doing 12-bit encodes
        # printf '    command = env AV_LOG_FORCE_COLOR=1 ffmpeg -fflags +genpts -hide_banner -i $in -write_id3v2 1 -id3v2_version 3 -map_metadata 0 -map_metadata:s:v 0:s:v -movflags use_metadata_tags -movflags faststart -ss $start $cmd_end -c:v libx265 -pix_fmt yuv420p12le -filter:v %shqdn3d=2:2:1:1 -crf:v %d -bufsize 1M %s %s -export_xmp 1 -export_all 1 $out\n' $crop $crf $audio_style "$extra_cmd"
        printf '    command = ffencode --range $start,$end --crf %s $crop $in $out \n' $crf
    end

    printf '    description = $in from $start to $end\n' $crf

    echo 'rule ffconcat'
    echo '    command = ffconcat $in $out'
end | tee -a $script > /dev/null

set -l files ""
set -l index 1
for chunk in $chunks
    set -l start (string split , --  $chunk)[1]
    set -l end (string split , -- $chunk)[2]
    set -l cmd_end ""
    if not string match -rq "." $start
        set $start 0
    end
    echo "start: $start, end: $end"
    if string match -rq "." $end
        # We are now using -ss before -i, so we need to use -t <length> and not -to <timestamp>
        # set cmd_end -to $end
        set cmd_end -t (ts_diff $start $end)
    else
        set cmd_end
    end


    set -l outfile $outdir/$index.$ext
    begin
        echo "build $outfile: fftrim" (string replace -a ' ' '$ ' -- $source)
        echo "   start = $start"
        echo "   cmd_end = $cmd_end"
        echo "   end =" (if string match -qr . -- $end; echo $end; else; echo "end"; end)
    end | tee -a $script > /dev/null

    set files "$files $outfile"
    set index (math "$index + 1")
end

begin
    printf 'build %s: ffconcat %s\n' (string replace -a ' ' '$ ' -- $temp_dest) $files
end | tee -a $script > /dev/null

printf "Splitting input into %d files then merging.\n" (count $chunks)

# tmux new-session 'htop' \; split-window "cat $script; cat" \; split-window "ninja -C $outdir; cat; tmux kill-pane -a" \;
# NINJA_STATUS does not yet support ANSI color escapes. See https://github.com/ninja-build/ninja/issues/713
# set -l ninja_status '\\033[32m%e ([%f/%t])\\033[0m'
set -l ninja_status '[%f/%t] (%es): '
env NINJA_STATUS=$ninja_status ninja -v -C $outdir

and begin
    # Work around an ffmpeg bug where metadata is not copied to the correct section
    # See https://trac.ffmpeg.org/ticket/4209
    mp4extract moov/meta $source moov-meta 2>| string replace "ERROR: " "";
    test -f moov-meta && mp4edit --insert moov:moov-meta $temp_dest /dev/stdout | rewrite $temp_dest
    rm -f moov-meta

    touch -r $source $temp_dest
    safe_mv $temp_dest $dest

    rm -rf $outdir
    if type -q size_compare
        size_compare $source $dest $orig_size
    end
end

echo "done!"
